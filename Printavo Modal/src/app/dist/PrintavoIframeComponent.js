(function(React2, react) {
  "use strict";
  function extend_V2(renderExtensionCallback) {
    return self.extend_V2(renderExtensionCallback);
  }
  function serverless(name, options) {
    return self.serverless(name, options);
  }
  function fetch(url, options) {
    return self.hsFetch(url, options);
  }
  const hubspot = {
    extend: extend_V2,
    serverless,
    fetch
  };
  react.createRemoteReactComponent("Alert");
  const Button = react.createRemoteReactComponent("Button", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("ButtonRow");
  react.createRemoteReactComponent("Card");
  react.createRemoteReactComponent("DescriptionList");
  react.createRemoteReactComponent("DescriptionListItem");
  react.createRemoteReactComponent("Divider");
  react.createRemoteReactComponent("EmptyState");
  react.createRemoteReactComponent("ErrorState");
  react.createRemoteReactComponent("Form");
  react.createRemoteReactComponent("Heading");
  react.createRemoteReactComponent("Image", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("Input");
  const Link = react.createRemoteReactComponent("Link", {
    fragmentProps: ["overlay"]
  });
  react.createRemoteReactComponent("TextArea");
  react.createRemoteReactComponent("Textarea");
  react.createRemoteReactComponent("LoadingSpinner");
  react.createRemoteReactComponent("ProgressBar");
  react.createRemoteReactComponent("Select");
  react.createRemoteReactComponent("Tag", {
    fragmentProps: ["overlay"]
  });
  const Text = react.createRemoteReactComponent("Text");
  react.createRemoteReactComponent("Tile");
  react.createRemoteReactComponent("Stack");
  react.createRemoteReactComponent("ToggleGroup");
  react.createRemoteReactComponent("StatisticsItem");
  react.createRemoteReactComponent("Statistics");
  react.createRemoteReactComponent("StatisticsTrend");
  react.createRemoteReactComponent("Table");
  react.createRemoteReactComponent("TableFooter");
  react.createRemoteReactComponent("TableCell");
  react.createRemoteReactComponent("TableRow");
  react.createRemoteReactComponent("TableBody");
  react.createRemoteReactComponent("TableHeader");
  react.createRemoteReactComponent("TableHead");
  react.createRemoteReactComponent("NumberInput");
  const Box = react.createRemoteReactComponent("Box");
  react.createRemoteReactComponent("StepIndicator");
  react.createRemoteReactComponent("Accordion");
  react.createRemoteReactComponent("MultiSelect");
  const Flex = react.createRemoteReactComponent("Flex");
  react.createRemoteReactComponent("DateInput");
  react.createRemoteReactComponent("Checkbox");
  react.createRemoteReactComponent("RadioButton");
  react.createRemoteReactComponent("List");
  react.createRemoteReactComponent("Toggle");
  react.createRemoteReactComponent("Dropdown");
  react.createRemoteReactComponent("Panel");
  react.createRemoteReactComponent("PanelFooter");
  react.createRemoteReactComponent("PanelBody");
  react.createRemoteReactComponent("PanelSection");
  react.createRemoteReactComponent("StepperInput");
  react.createRemoteReactComponent("Modal");
  react.createRemoteReactComponent("ModalBody");
  react.createRemoteReactComponent("ModalFooter");
  react.createRemoteReactComponent("Icon");
  react.createRemoteReactComponent("StatusTag");
  var ServerlessExecutionStatus;
  (function(ServerlessExecutionStatus2) {
    ServerlessExecutionStatus2["Success"] = "SUCCESS";
    ServerlessExecutionStatus2["Error"] = "ERROR";
  })(ServerlessExecutionStatus || (ServerlessExecutionStatus = {}));
  hubspot.extend(({ actions }) => /* @__PURE__ */ React2.createElement(Extension, { openIframe: actions.openIframeModal }));
  const Extension = ({ openIframe }) => {
    const [invoiceURL, setInvoiceURL] = React2.useState("");
    onClick = { handleClick: handleClick2 };
    React2.useEffect(() => {
      const fethcproperties = async () => {
        const dealsData = await fethcproperties();
        const invoiceURL2 = dealsData.Invoice_URL;
        setInvoiceURL(invoiceURL2);
      };
      fethcproperties();
    }, []);
    const handleClick2 = () => {
      if (invoiceURL) {
        openIframe({
          uri: invoiceURL,
          // Use the fetched Invoice_URL
          height: 1e3,
          width: 1e3,
          title: "Printavo iFrame",
          flush: true
        });
      }
    };
    return invoiceURL ? /* @__PURE__ */ React2.createElement("button", { onClick: handleClick2 }, "Open Invoice") : null;
  };
  /* @__PURE__ */ React2.createElement(React2.Fragment, null, /* @__PURE__ */ React2.createElement(Flex, { direction: "column", align: "start", gap: "medium" }, /* @__PURE__ */ React2.createElement(Text, null, "Clicking the button will open a modal dialog with an iframe that displays the content at the provided URL. Get more info on how to do this ", " ", ".", /* @__PURE__ */ React2.createElement(Link, { href: "https://developers.hubspot.com/docs/platform/create-ui-extensions#open-an-iframe-in-a-modal" }, "here")), /* @__PURE__ */ React2.createElement(Box, null, /* @__PURE__ */ React2.createElement(Button, { type: "submit", onClick: handleClick }, "Printavo Invoice"))));
})(React, RemoteUI);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
